第1题 谈谈变量提升？

  变量提升的概念：函数和变量的声明会被js的解释器放到最上面。
  js执行前有一个“预编译”过程
  预编译主要有两个任务：
  声明所有var变量（初始为undefined）。
  解析定义式函数语句。
  例子1：
  function fn1() {
      a = 2;
      console.log(a); 
      console.log(window.a); 
      var a = 8;
      console.log(a); 
    }
    fn1();
    输出结果依次为：2 undefined 8，因为代码在解析的时候相当于

      var a;//函数的声明会被解释器放到头部，预先声明，但没有赋值，所以在此刻a是undefined
       a = 1;
      console.log(a); 
      console.log(window.a); //此处打印的是全局变量的a，但是并没有声明全局变量a
      a = 5;
      console.log(a); 
     例子2：
     //全局作用域下
    a = 5;
    //全局作用域下
    var a = 5;
    都在全局作用域下执行两端代码有何区别？

    a=1相当于window.a=5。为全局window对象添加了一个属性a值为5
    var a=5相当于在全局作用域中声明了变量a，在整个作用域中都有效
    后者比前者多了一个声明的行为
    前者没有变量提升过程，提前访问会报错，后者有变量提升


第2题 说说bind、call、apply的 区别？

  bind、call、apply三者都是用来改变函数的this对象的指向的，第一个参数都是this,是prototype的方法。
  var xw = {
         name : "小王",
         gender : "男",
         age : 24,
         say : function(school,grade) {
            alert(this.name + " , " + this.gender + " ,今年" + this.age + " ,在" + school + "上" + grade);                               
         }
  }
  var xh = {
        name : "小红",
        gender : "女",
        age : 18
   }
   xw.say();
  对于call可以这样：
    xw.say.call(xh,"实验小学","六年级");
  对于apply可以这样：
    xw.say.apply(xh,["实验小学","六年级郑州牛皮癣医"]);
  而对于bind来说需要这样
    xw.say.bind(xh,"实验小学","六年级")();或者xw.say.bind(xh)("实验小学","六年级");
  从而可以看出call和apply都是对函数的直接调用，而bind方法返回的仍然是一个函数，因此后面还需要()来进行调用才可以。
  call方法传入的是字符串，而apply方法传入的是一个数组，因为call()是apply()的语法糖；
  需理解以下两个例子：
  const xw = {
        name : "小王",
        gender : "男",
        age : 24,
        say() {
            return this.name + " , " + this.gender + " ,今年" + this.age                               
        }
  }
  console.log(xw.say());
  //小王，男，今年24
  const person = {
        age: 20,
        getAge() {
          return this.age
        }
      }
  const getAge = person.getAge
  console.log(getAge())
  //undefined
  使用bind方法
  const getAge = person.getAge.bind(person)
  console.log(getAge())
  //20

第3题 如何实现一个 bind 函数？

  来自MDN:bind的介绍：
  bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。
  为什么要自己去实现一个bind函数？
  因为bind()函数在 ECMA-262 第五版才被加入；它可能无法在所有浏览器上运行。
  看下面一个例子：
  function animal(name) {
      this.name = name
  }
  let obj = {}

  let cat = animal.bind(obj)
  cat('lily')
  console.log(obj.name)  //lily

  let tom = new cat('tom')
  console.log(obj.name)  //lily
  console.log(tom.name)  //tom
  结果发现，obj.name依然是lily而没有变成tom，所以就像MDN描述的那样，如果绑定函数cat是通过new操作符来创建实例对象的话，
  this会指向创建的新对象tom，而不再固定绑定指定的对象obj。
  
  而bind函数的核心作用：绑定this、初始化参数。
  语法：fun.bind(thisArg[, arg1[, arg2[, ...]]])
  MDN:bind的实现如下：
  if (!Function.prototype.bind) {
  Function.prototype.bind = function(oThis) {
    if (typeof this !== 'function') {
      // closest thing possible to the ECMAScript 5
      // internal IsCallable function
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    }

    var aArgs = Array.prototype.slice.call(arguments, 1),//这里的arguments是跟oThis一起传进来的实参
      fToBind = this,
      fNOP    = function() {},
      fBound  = function() {
        return fToBind.apply(this instanceof fNOP
          ? this
          : oThis,
          // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的
          aArgs.concat(Array.prototype.slice.call(arguments)));
      };

    // 维护原型关系
    if (this.prototype) {
      // Function.prototype doesn't have a prototype property
      fNOP.prototype = this.prototype;
    }
    fBound.prototype = new fNOP();

    return fBound;
  };
}
其中Array.prototype.slice.call(arguments)的意思是能将具有length属性的对象转成数组
由于arguments是类数组对象，不拥有数组的slice方法，所以需要通过call来将slice的this指向arguments。args就是调用bind时传入的初始化参数
（剔除了第一个参数oThis）。将args与绑定函数执行时的实参arguments通过concat连起来作为参数传入。
  
第4题 请实现一个 call 函数

  实现思路：
  1.改变this指向：可以将目标函数作为这个对象的属性
  2.利用arguments类数组对象实现参数不定长
  3.不能增加对象的属性，所以在结尾需要delete
  es6实现：
  Function.prototype.myCall = function (object, ...arg) {
      if (this === Function.prototype) {
          return undefined; // 用于防止 Function.prototype.myCall() 直接调用
      }
      let obj = Object(object) || window; // 加入这里没有参数，this则要指向window;
      obj.fn = this; // 将this的指向函数本身；
      obj.fn(...arg); // 对象上的方法，在调用时，this是指向对象的。
      delete obj.fn; // 再删除obj的_fn_属性,去除影响.
  }
  es5实现：
  Function.prototype.myCall = function(obj){
    let arg = [];
    for(let i = 1 ; i<arguments.length ; i++){
        arg.push( 'arguments[' + i + ']' ) ;
        // 这里要push 这行字符串  而不是直接push 值
        // 因为直接push值会导致一些问题
        // 例如: push一个数组 [1,2,3]
        // 在下面 eval调用时,进行字符串拼接,JS为了将数组转换为字符串 ，
        // 会去调用数组的toString()方法,变为 '1,2,3' 就不是一个数组了，相当于是3个参数.
        // 而push这行字符串，eval方法，运行代码会自动去arguments里获取值
    }
    obj._fn_ = this;
    eval( 'obj._fn_(' + arg + ')' ) // 字符串拼接，JS会调用arg数组的toString()方法，这样就传入了所有参数
    delete obj._fn_;
 } 

第5题 如何实现一个 apply 函数？
第6题 简单说下原型链？
第7题 怎么判断对象类型？
第8题 说说箭头函数的特点
第9题 如何确定This指向
第10题 async、await 的优缺点
第11题 generator 原理
第12题 对Promise的理解
第13题 == 和 ===区别，什么情况用 ==
第14题 垃圾回收 新生代算法，老生代算法
第15题 说说你对闭包的理解
第16题 基本数据类型和引?类型在存储上的差别
第17题 浏览器 Eventloop 和 Node 中的有什么区别
第18题 怎样理解setTimeout 执行误差
第19题 说说函数节流和防抖
第20题 数组降维
第21题 请实现一个深拷贝
第22题 typeof 于 instanceof 区别
第23题 cookie和localSrorage、session、indexDB 的区别
第24题 怎么判断页面是否加载完成？
第25题 说说 jsonp 原理
第26题 说说你对Service worker的理解
第27题 说说浏览器缓存机制
第28题 怎样选择合适的缓存策略
第29题 说说重绘（Repaint）和回流（Reflow）
第30题 如何优化图片
第31题 页面首屏渲染性能优化方案有哪些
第32题 浏览器性能问题-使用 Webpack 优化项目
第33题 Babel 原理
第34题 介绍下React 生命周期
第35题 react setState 机制
第36题 Vue的 nextTick 原理
第37题 Vue 生命周期
第38题 Vue 双向绑定
第39题 v-model原理
第40题 watch 和 computed 的区别和运用的场景
第41题 Vue 的父子通信
第42题 简述路由原理
第43题 MVVM-脏数据检测
第44题 MVVM-数据劫持
第45题 React V16 生命周期函数用法
第46题 Vue 和 React 区别
第47题 介绍下虚拟 DOM，对虚拟 DOM 的理解
第48题 路由鉴权
第49题 TCP 3次握手
第50题 TCP 拥塞控制
第51题 慢开始算法
第52题 拥塞避免算法
第53题 tcp 快速重传
第54题 TCP New Ren 改进后的快恢复
第55题 HTTPS 握手
第56题 从输入 URL 到页面加载全过程
第57题 HTTP 常用状态码 301 302 304 403
第58题 常见排序-冒泡排序
第59题 常见排序-插入排序
第60题 常见排序-选择排序
第61题 常见排序-归并排序
第62题 常见排序-快排
第63题 常见排序-堆排序
第64题 常见排序-系统自带排序实现
第65题 介绍下设计模式-工厂模式
第66题 介绍下设计模式-单例模式
第67题 介绍下设计模式-适配器模式
第68题 介绍下设计模式-装饰模式
第69题 介绍下设计模式-代理模式
第70题 介绍下设计模式-发布-订阅模式
第71题 Vue 响应式原理
第72题 实现一个new操作符
第73题 实现一个JSON.stringify
第74题 实现一个JSON.parse
第75题 手写一个继承
第76题 实现一个JS函数柯里化
第77题 请手写一个Promise(中高级必考)
第78题 手写防抖(Debouncing)和节流(Throttling)
第79题 实现一个instanceOf
第80题 实现一个私有变量
第81题 使用setTimeout代替setInterval进行间歇调用
第82题 数组中的forEach和map的区别
第83题 for in和for of的区别
第84题 写一个发布订阅 EventEmitter方法
第85题 let、var、const区别
第86题 typeof和instanceof 区别
第87题 常见的继承的几种方法
第88题 常见的浏览器内核有哪些?
第89题 浏览器的主要组成部分是什么？
第90题 浏览器是如何渲染UI的？
第91题 浏览器如何解析css选择器？
第92题 DOM Tree是如何构建的？
第93题 重绘与重排的区别？
第94题 如何触发重排和重绘？
第95题 如何避免重绘或者重排？
第96题 前端如何实现即时通讯？
第97题 什么是浏览器同源策略？
第98题 怎样解决跨域问题？
第99题 时间格式化
第100题 说说对html 语义化的理解
第101题 说说常用的 meta 标签
第102题 说说两种盒模型以及区别
第103题 css reset 和 normalize.css 有什么区别
第104题 怎样让元素水平垂直居中
第105题 说说选择器的权重计算方式
第106题 清除浮动的方
